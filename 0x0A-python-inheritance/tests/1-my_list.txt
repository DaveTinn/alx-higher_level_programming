The ``1-my_list`` module
========================

Using ``1-mylist``
------------------------

Import function from module:

    >>> MyList = __import__('1-my_list').MyList

Correct Class Type test:

    >>> m_list = MyList()
    >>> type(m_list) == MyList
    True

Correct Instance test:

    >>> m_list = MyList()
    >>> isinstance(m_list, list)
    True

print_sorted is an instance method:

    >>> type(MyList.__dict__['print_sorted'])
    <class 'function'>

print_sorted called via class with no argument:

    >>> m_list.__class__.print_sorted()
    Traceback (most recent call last):
	...
    TypeError: print_sorted() missing 1 required positional argument: 'self'

print_sorted called with 1 arg:

    >>> m_list.print_sorted([4, 2, 5])
    Traceback (most recent call last):
	
    TypeError: print_sorted() takes 1 positional argument but 2 were given

print_sorted called with 2 args:

    >>> m_list.print_sorted([4, 2, 5], 1)
    Traceback (most recent call last):
	...
    TypeError: print_sorted() takes 1 positional argument but 3 were given

Empty list test:

    >>> m_list = MyList()
    >>> m_list.print_sorted()
    []

Normal list test 1:

    >>> m_list = MyList([2, 10, 1])
    >>> m_list.print_sorted()
    [1, 2, 10]

Normal list test 2:

    >>> m_list = MyList([1, 4, 2, 3, 5])
    >>> m_list.print_sorted()
    [1, 2, 3, 4, 5]

Negative integers list test:
    >>> m_list = MyList([-1000, -98, -232565, 0, -23423434, -123])
    >>> m_list.print_sorted()
    [-23423434, -232565, -1000, -123, -98, 0]

Original list unchanged:

    >>> m_list = MyList([2, 10, 1, -10, 20, 100, 0])
    >>> m_list.print_sorted()
    [-10, 0, 1, 2, 10, 20, 100]
    >>> m_list
    [2, 10, 1, -10, 20, 100, 0]

List already in order:

    >>> m_list = MyList([-10, 0, 1, 2, 10, 20, 100])
    >>> m_list.print_sorted()
    [-10, 0, 1, 2, 10, 20, 100]

Test append:

    >>> m_list = MyList()
    >>> m_list.append(10)
    >>> m_list
    [10]
